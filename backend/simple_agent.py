"""
Agent ƒê∆°n Gi·∫£n cho QuizForce AI Test
X·ª≠ l√Ω t·∫•t c·∫£ c√°c c√¥ng vi·ªác trong m·ªôt agent ƒë·ªÉ tr√°nh ph·ª©c t·∫°p.
"""

import json
import re
import os
import io
import time
import docx
from typing import Dict, Optional, Tuple, Any, List  # Th√™m List v√†o import
from PIL import Image
import google.generativeai as genai
from dotenv import load_dotenv
import random

load_dotenv()

class SimpleQuizAgent:
    """
    Agent AI Chuy√™n Nghi·ªáp cho Vi·ªát Nam - X·ª≠ l√Ω to√†n b·ªô quy tr√¨nh t·∫°o quiz:
    1. Ph√¢n t√≠ch ƒë√°p √°n (vƒÉn b·∫£n/h√¨nh ·∫£nh)
    2. Tr√≠ch xu·∫•t c√¢u h·ªèi t·ª´ DOCX
    3. Bi√™n so·∫°n quiz ho√†n ch·ªânh
    
    ƒê∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho h·ªá th·ªëng gi√°o d·ª•c Vi·ªát Nam
    """
    
    def __init__(self, api_key: str = None):
        """Kh·ªüi t·∫°o Agent AI chuy√™n nghi·ªáp."""
        self.api_key = api_key or os.getenv("GOOGLE_API_KEY")
        if not self.api_key:
            raise ValueError("C·∫ßn c√≥ API key ƒë·ªÉ kh·ªüi ƒë·ªông agent")
        
        # Kh·ªüi t·∫°o Gemini v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel('gemini-2.0-flash')
        
        # Th√¥ng tin agent
        self.agent_name = "QuizMaster AI"
        self.agent_version = "2.0"  # N√¢ng c·∫•p l√™n v2.0
        self.specialization = "Chuy√™n gia t·∫°o quiz tr·∫Øc nghi·ªám cho gi√°o d·ª•c Vi·ªát Nam"
        
        # Enhanced quota management
        self.requests_count = 0
        self.last_request_time = 0
        self.base_delay = 0.5
        self.max_retries = 3
        self.batch_size = 10  # X·ª≠ l√Ω 10 c√¢u m·ªôt batch
        self.batch_delay = 5   # ƒê·ª£i 5 gi√¢y gi·ªØa c√°c batch
        self.quota_exceeded_delay = 30  # ƒê·ª£i 30 gi√¢y khi g·∫∑p quota limit
        self.failed_questions = []  # L∆∞u c√°c c√¢u th·∫•t b·∫°i ƒë·ªÉ x·ª≠ l√Ω l·∫°i
        
        print(f"‚ú® {self.agent_name} v{self.agent_version} ƒë√£ s·∫µn s√†ng")
        print(f"üéØ {self.specialization}")
        print(f"‚öôÔ∏è Batch processing: {self.batch_size} questions/batch, {self.batch_delay}s delay")
    
    def _smart_rate_limit(self):
        """Qu·∫£n l√Ω rate limit th√¥ng minh v·ªõi exponential backoff."""
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        
        # T√≠nh delay d·ª±a tr√™n s·ªë requests g·∫ßn ƒë√¢y
        if self.requests_count > 20:
            delay = self.base_delay * 2  # Double delay after 20 requests
        elif self.requests_count > 10:
            delay = self.base_delay * 1.5  # 1.5x delay after 10 requests
        else:
            delay = self.base_delay
        
        # ƒê·∫£m b·∫£o delay t·ªëi thi·ªÉu
        if time_since_last < delay:
            sleep_time = delay - time_since_last
            if sleep_time > 0:
                time.sleep(sleep_time)
        
        self.last_request_time = time.time()
        self.requests_count += 1
    
    def _make_api_request(self, prompt: str, retries: int = 0) -> str:
        """Th·ª±c hi·ªán API request v·ªõi retry logic v√† quota management."""
        try:
            self._smart_rate_limit()
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            error_str = str(e).lower()
            
            # X·ª≠ l√Ω quota exceeded
            if "quota" in error_str or "limit" in error_str or "429" in error_str:
                if retries < self.max_retries:
                    # Exponential backoff: 2^retry_count seconds + random jitter
                    wait_time = (2 ** retries) + random.uniform(0.5, 1.5)
                    print(f"‚è≥ Quota limit detected, waiting {wait_time:.1f}s before retry {retries + 1}/{self.max_retries}")
                    time.sleep(wait_time)
                    return self._make_api_request(prompt, retries + 1)
                else:
                    raise Exception(f"‚ùå Quota limit exceeded sau {self.max_retries} attempts. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.")
            
            # X·ª≠ l√Ω c√°c l·ªói kh√°c
            elif "safety" in error_str:
                raise Exception("‚ùå Content b·ªã t·ª´ ch·ªëi b·ªüi safety filter. Vui l√≤ng ki·ªÉm tra n·ªôi dung.")
            else:
                if retries < self.max_retries:
                    wait_time = 1 + retries
                    print(f"‚ö†Ô∏è API error, retrying in {wait_time}s: {e}")
                    time.sleep(wait_time)
                    return self._make_api_request(prompt, retries + 1)
                else:
                    raise e

    def process_text_answers(self, answer_text: str) -> Dict[int, str]:
        """X·ª≠ l√Ω ƒë√°p √°n d·∫°ng vƒÉn b·∫£n v·ªõi ƒë·ªô ch√≠nh x√°c cao v√† nhi·ªÅu format."""
        print("üîç Agent ƒëang ph√¢n t√≠ch ƒë√°p √°n vƒÉn b·∫£n...")
        
        # Th·ª≠ ph√¢n t√≠ch b·∫±ng regex tr∆∞·ªõc
        regex_result = self._parse_answers_with_regex(answer_text)
        if regex_result:
            print(f"‚úÖ Ph√¢n t√≠ch regex th√†nh c√¥ng: {len(regex_result)} ƒë√°p √°n")
            return regex_result
        
        # N·∫øu regex kh√¥ng ƒë∆∞·ª£c th√¨ d√πng AI
        prompt = f"""
        B·∫°n l√† chuy√™n gia x·ª≠ l√Ω ƒë√°p √°n tr·∫Øc nghi·ªám Vi·ªát Nam.
        
        NHI·ªÜM V·ª§: Tr√≠ch xu·∫•t CH√çNH X√ÅC s·ªë c√¢u v√† ƒë√°p √°n t·ª´ vƒÉn b·∫£n.
        
        QUY T·∫ÆC:
        - T√¨m t·∫•t c·∫£ patterns: "s·ªë. ƒë√°p_√°n" ho·∫∑c "s·ªë) ƒë√°p_√°n" ho·∫∑c "s·ªë: ƒë√°p_√°n"
        - Format JSON: {{"1": "A", "2": "B", "3": "AC"}}
        - Key l√† string c·ªßa s·ªë c√¢u
        - Value l√† ƒë√°p √°n (A,B,C,D ho·∫∑c k·∫øt h·ª£p AC,BD,ABC,ABCD)
        - Chu·∫©n h√≥a ƒë√°p √°n k·∫øt h·ª£p theo th·ª© t·ª± ABC
        
        VƒÇN B·∫¢N:
        {answer_text}
        
        V√ç D·ª§ OUTPUT:
        {{"1": "A", "2": "BD", "3": "C", "10": "ABC"}}
        
        CH·ªà TR·∫¢ V·ªÄ JSON:
        """
        
        try:
            response_text = self._make_api_request(prompt)
            result = self._parse_json_response(response_text)
            # Convert keys to int
            result = {int(k): v for k, v in result.items() if k.isdigit()}
            print(f"‚úÖ ƒê√£ ph√¢n t√≠ch AI: {len(result)} ƒë√°p √°n")
            return result
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω ƒë√°p √°n vƒÉn b·∫£n: {e}")
            return {}
    
    def _parse_answers_with_regex(self, text: str) -> Dict[int, str]:
        """Ph√¢n t√≠ch ƒë√°p √°n b·∫±ng regex v·ªõi nhi·ªÅu patterns ph·ªï bi·∫øn."""
        answers = {}
        
        # C√°c patterns th∆∞·ªùng g·∫∑p
        patterns = [
            r'(\d+)\s*\.\s*([A-D]+)',  # 1. A ho·∫∑c 1. AC
            r'(\d+)\s*\)\s*([A-D]+)',  # 1) A
            r'(\d+)\s*:\s*([A-D]+)',   # 1: A
            r'(\d+)\s+([A-D]+)',       # 1 A
            r'C√¢u\s*(\d+)\s*[\.:\)]\s*([A-D]+)',  # C√¢u 1. A
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            temp_answers = {}
            
            for match in matches:
                try:
                    q_num = int(match[0])
                    answer = match[1].upper().strip()
                    # S·∫Øp x·∫øp ƒë√°p √°n k·∫øt h·ª£p
                    answer = ''.join(sorted(set(answer)))
                    temp_answers[q_num] = answer
                except:
                    continue
            
            # Ch·ªçn k·∫øt qu·∫£ t·ªët nh·∫•t
            if len(temp_answers) > len(answers):
                answers = temp_answers
        
        return answers

    def process_image_answers(self, image_data: bytes) -> Dict[int, str]:
        """X·ª≠ l√Ω ƒë√°p √°n t·ª´ h√¨nh ·∫£nh v·ªõi c√¥ng ngh·ªá OCR ti√™n ti·∫øn."""
        print("üñºÔ∏è Agent ƒëang ph√¢n t√≠ch ƒë√°p √°n t·ª´ h√¨nh ·∫£nh...")
        
        try:
            image = Image.open(io.BytesIO(image_data))
            
            prompt = """
            B·∫°n l√† chuy√™n gia x·ª≠ l√Ω h√¨nh ·∫£nh v√† OCR cho h·ªá th·ªëng gi√°o d·ª•c Vi·ªát Nam.
            
            NHI·ªÜM V·ª§: ƒê·ªçc v√† tr√≠ch xu·∫•t ƒë√°p √°n tr·∫Øc nghi·ªám t·ª´ h√¨nh ·∫£nh.
            
            Y√äU C·∫¶U:
            - Ph√¢n t√≠ch ch√≠nh x√°c t·ª´ng s·ªë c√¢u v√† ƒë√°p √°n t∆∞∆°ng ·ª©ng
            - Format JSON: {"1": "A", "2": "B", "3": "AC"}
            - X·ª≠ l√Ω c·∫£ ƒë√°p √°n ƒë∆°n (A, B, C, D) v√† ƒë√°p √°n k√©p (AC, BD, ABC)
            - B·ªè qua nhi·ªÖu, ch·ªØ vi·∫øt tay kh√¥ng r√µ r√†ng
            
            CH·ªà TR·∫¢ V·ªÄ JSON OBJECT:
            """
            
            self._smart_rate_limit()
            response = self.model.generate_content([prompt, image])
            result = self._parse_json_response(response.text)
            print(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(result)} ƒë√°p √°n t·ª´ h√¨nh ·∫£nh")
            return result
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω h√¨nh ·∫£nh: {e}")
            return {}
    
    def extract_questions_from_docx(self, docx_file) -> Dict[int, str]:
        """Tr√≠ch xu·∫•t c√¢u h·ªèi t·ª´ file DOCX v·ªõi thu·∫≠t to√°n th√¥ng minh c·∫£i ti·∫øn."""
        print("üìÑ Agent ƒëang tr√≠ch xu·∫•t c√¢u h·ªèi t·ª´ file DOCX...")
        
        try:
            # ƒê·ªçc n·ªôi dung DOCX
            file_stream = io.BytesIO(docx_file.getvalue())
            document = docx.Document(file_stream)
            
            # Tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ t·∫•t c·∫£ paragraph
            paragraphs = []
            for para in document.paragraphs:
                text = para.text.strip()
                if text:  # Ch·ªâ l·∫•y paragraph c√≥ n·ªôi dung
                    paragraphs.append(text)
            
            full_text = "\n".join(paragraphs)
            
            # L√†m s·∫°ch vƒÉn b·∫£n
            cleaned_text = self._clean_vietnamese_text(full_text)
            
            # Th·ª≠ nhi·ªÅu ph∆∞∆°ng ph√°p tr√≠ch xu·∫•t
            question_blocks = {}
            
            # Ph∆∞∆°ng ph√°p 1: T√°ch theo paragraph
            blocks_by_para = self._extract_by_paragraphs(paragraphs)
            if blocks_by_para:
                question_blocks.update(blocks_by_para)
                print(f"üìã Ph∆∞∆°ng ph√°p paragraph: {len(blocks_by_para)} c√¢u")
            
            # Ph∆∞∆°ng ph√°p 2: T√°ch theo patterns
            blocks_by_pattern = self._extract_vietnamese_question_blocks(cleaned_text)
            if len(blocks_by_pattern) > len(question_blocks):
                question_blocks = blocks_by_pattern
                print(f"üìã Ph∆∞∆°ng ph√°p pattern: {len(blocks_by_pattern)} c√¢u")
            
            print(f"‚úÖ T·ªïng c·ªông tr√≠ch xu·∫•t: {len(question_blocks)} c√¢u h·ªèi")
            
            # Debug info
            if question_blocks:
                sample_nums = list(question_blocks.keys())[:5]
                print(f"üîç S·ªë c√¢u m·∫´u: {sample_nums}")
            
            return question_blocks
            
        except Exception as e:
            print(f"‚ùå L·ªói tr√≠ch xu·∫•t file DOCX: {e}")
            return {}
    
    def _extract_by_paragraphs(self, paragraphs) -> Dict[int, str]:
        """Tr√≠ch xu·∫•t c√¢u h·ªèi theo t·ª´ng paragraph."""
        questions = {}
        current_question = None
        current_text = []
        
        # Patterns ƒë·ªÉ nh·∫≠n di·ªán ƒë·∫ßu c√¢u h·ªèi
        question_patterns = [
            r'^C√¢u\s*(\d+)\s*[\.:]',
            r'^Question\s*(\d+)\s*[\.:]',
            r'^(\d+)\s*[\.:]',
            r'^(\d+)\s*\)',
            r'^B√†i\s*(\d+)\s*[\.:]',
        ]
        
        for para in paragraphs:
            para = para.strip()
            if not para:
                continue
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i ƒë·∫ßu c√¢u h·ªèi m·ªõi kh√¥ng
            found_new_question = False
            for pattern in question_patterns:
                match = re.match(pattern, para, re.IGNORECASE)
                if match:
                    # L∆∞u c√¢u h·ªèi tr∆∞·ªõc ƒë√≥
                    if current_question and current_text:
                        questions[current_question] = "\n".join(current_text)
                    
                    # B·∫Øt ƒë·∫ßu c√¢u h·ªèi m·ªõi
                    current_question = int(match.group(1))
                    current_text = [para]
                    found_new_question = True
                    break
            
            if not found_new_question and current_question:
                # Th√™m v√†o c√¢u h·ªèi hi·ªán t·∫°i
                current_text.append(para)
        
        # L∆∞u c√¢u h·ªèi cu·ªëi c√πng
        if current_question and current_text:
            questions[current_question] = "\n".join(current_text)
        
        return questions

    def _make_api_request_with_recovery(self, prompt: str, retries: int = 0, is_retry: bool = False) -> str:
        """Th·ª±c hi·ªán API request v·ªõi recovery mechanism n√¢ng cao."""
        try:
            if not is_retry:
                self._smart_rate_limit()
            
            response = self.model.generate_content(prompt)
            return response.text
            
        except Exception as e:
            error_str = str(e).lower()
            
            # X·ª≠ l√Ω quota exceeded v·ªõi recovery mechanism
            if "quota" in error_str or "limit" in error_str or "429" in error_str:
                if retries < self.max_retries:
                    # Exponential backoff
                    wait_time = (2 ** retries) + random.uniform(0.5, 1.5)
                    print(f"‚è≥ Quota limit detected, waiting {wait_time:.1f}s before retry {retries + 1}/{self.max_retries}")
                    time.sleep(wait_time)
                    return self._make_api_request_with_recovery(prompt, retries + 1, is_retry=True)
                else:
                    # Sau khi th·ª≠ h·∫øt retry, n√©m exception ƒë·ªÉ batch processor x·ª≠ l√Ω
                    raise Exception(f"QUOTA_EXCEEDED_AFTER_RETRIES")
            
            # X·ª≠ l√Ω c√°c l·ªói kh√°c
            elif "safety" in error_str:
                raise Exception("‚ùå Content b·ªã t·ª´ ch·ªëi b·ªüi safety filter. Vui l√≤ng ki·ªÉm tra n·ªôi dung.")
            else:
                if retries < self.max_retries:
                    wait_time = 1 + retries
                    print(f"‚ö†Ô∏è API error, retrying in {wait_time}s: {e}")
                    time.sleep(wait_time)
                    return self._make_api_request_with_recovery(prompt, retries + 1, is_retry=True)
                else:
                    raise e

    def compile_question(self, question_num: int, question_text: str, correct_answer: str) -> Dict[str, Any]:
        """Bi√™n so·∫°n c√¢u h·ªèi th√†nh format chu·∫©n."""
        print(f"‚öôÔ∏è ƒêang bi√™n so·∫°n c√¢u h·ªèi s·ªë {question_num}...")
        
        prompt = f"""
        B·∫°n l√† chuy√™n gia bi√™n so·∫°n ƒë·ªÅ thi tr·∫Øc nghi·ªám h√†ng ƒë·∫ßu t·∫°i Vi·ªát Nam v·ªõi 15 nƒÉm kinh nghi·ªám.
        
        NHI·ªÜM V·ª§: Ph√¢n t√≠ch v√† chu·∫©n h√≥a c√¢u h·ªèi tr·∫Øc nghi·ªám theo ti√™u chu·∫©n gi√°o d·ª•c Vi·ªát Nam.
        
        FORMAT OUTPUT CHU·∫®N:
        {{
            "so_cau": {question_num},
            "cau_hoi": "N·ªôi dung c√¢u h·ªèi ƒë∆∞·ª£c l√†m s·∫°ch v√† chu·∫©n h√≥a",
            "lua_chon": {{
                "A": "L·ª±a ch·ªçn A - r√µ r√†ng, s√∫c t√≠ch",
                "B": "L·ª±a ch·ªçn B - r√µ r√†ng, s√∫c t√≠ch",
                "C": "L·ª±a ch·ªçn C - r√µ r√†ng, s√∫c t√≠ch",
                "D": "L·ª±a ch·ªçn D - r√µ r√†ng, s√∫c t√≠ch"
            }},
            "dap_an": "{correct_answer}",
            "do_kho": "trung_binh",
            "mon_hoc": "auto_detect",
            "ghi_chu": "ƒê∆∞·ª£c x·ª≠ l√Ω b·ªüi QuizMaster AI v2.0"
        }}
        
        Y√äU C·∫¶U X·ª¨ L√ù:
        - L√†m s·∫°ch n·ªôi dung c√¢u h·ªèi, lo·∫°i b·ªè k√Ω t·ª± th·ª´a
        - T√°ch ri√™ng c√¢u h·ªèi v√† 4 l·ª±a ch·ªçn A, B, C, D
        - ƒê·∫£m b·∫£o n·ªôi dung ti·∫øng Vi·ªát chu·∫©n, d·ªÖ hi·ªÉu
        - N·∫øu kh√¥ng t√°ch ƒë∆∞·ª£c ƒë·ªß 4 l·ª±a ch·ªçn, t·∫°o l·ª±a ch·ªçn h·ª£p l√Ω
        
        N·ªòI DUNG C√ÇU H·ªéI C·∫¶N X·ª¨ L√ù:
        {question_text}
        
        CH·ªà TR·∫¢ V·ªÄ JSON OBJECT:
        """
        
        try:
            response_text = self._make_api_request_with_recovery(prompt)
            compiled = self._parse_json_response(response_text)
            
            # Ki·ªÉm tra c·∫•u tr√∫c h·ª£p l·ªá
            if isinstance(compiled, dict) and "cau_hoi" in compiled and "lua_chon" in compiled:
                compiled["so_cau"] = question_num
                compiled["dap_an"] = correct_answer
                return compiled
            else:
                # Fallback v·ªõi c·∫•u tr√∫c an to√†n
                return self._create_fallback_question(question_num, question_text, correct_answer)
                
        except Exception as e:
            print(f"‚ùå L·ªói bi√™n so·∫°n c√¢u h·ªèi {question_num}: {e}")
            if "QUOTA_EXCEEDED_AFTER_RETRIES" in str(e):
                raise e
            return self._create_fallback_question(question_num, question_text, correct_answer, error=str(e))

    def process_complete_quiz(self, answer_data, docx_file, answer_type="text") -> Dict[str, Any]:
        """X·ª≠ l√Ω to√†n b·ªô quy tr√¨nh t·∫°o quiz t·ª´ A ƒë·∫øn Z v·ªõi batch processing th√¥ng minh."""
        print("üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh t·∫°o quiz ho√†n ch·ªânh v·ªõi batch processing...")
        
        # Reset counter cho session m·ªõi
        self.requests_count = 0
        self.failed_questions = []
        
        results = {
            "success": False,
            "parsed_answers": {},
            "question_blocks": {},
            "compiled_questions": [],
            "errors": [],
            "statistics": {},
            "debug_info": {},
            "agent_info": {
                "name": self.agent_name,
                "version": self.agent_version,
                "specialization": self.specialization,
                "quota_requests": 0,
                "batch_info": {
                    "batch_size": self.batch_size,
                    "total_batches": 0,
                    "completed_batches": 0,
                    "failed_questions": 0,
                    "recovered_questions": 0
                }
            }
        }
        
        try:
            start_time = time.time()
            
            # B∆Ø·ªöC 1-3: X·ª≠ l√Ω ƒë√°p √°n v√† c√¢u h·ªèi (gi·ªØ nguy√™n)
            print("üìù B∆Ø·ªöC 1/4: X·ª≠ l√Ω ƒë√°p √°n...")
            if answer_type == "text":
                results["parsed_answers"] = self.process_text_answers(answer_data)
            else:
                results["parsed_answers"] = self.process_image_answers(answer_data)
            
            if not results["parsed_answers"]:
                results["errors"].append("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch ƒë√°p √°n. Ki·ªÉm tra ƒë·ªãnh d·∫°ng: '1. A', '2. B'")
                return results
            
            print("üìÑ B∆Ø·ªöC 2/4: Tr√≠ch xu·∫•t c√¢u h·ªèi t·ª´ DOCX...")
            results["question_blocks"] = self.extract_questions_from_docx(docx_file)
            
            if not results["question_blocks"]:
                results["errors"].append("‚ùå Kh√¥ng th·ªÉ tr√≠ch xu·∫•t c√¢u h·ªèi. File DOCX ph·∫£i c√≥ format: 'C√¢u 1.' ho·∫∑c '1.'")
                return results
            
            print("üîç B∆Ø·ªöC 3/4: Ki·ªÉm tra t∆∞∆°ng th√≠ch d·ªØ li·ªáu...")
            
            answer_keys = set(results["parsed_answers"].keys())
            question_keys = set(results["question_blocks"].keys())
            
            results["debug_info"] = {
                "answer_keys": sorted(list(answer_keys)),
                "question_keys": sorted(list(question_keys)),
                "answer_count": len(answer_keys),
                "question_count": len(question_keys)
            }
            
            matching_keys = answer_keys & question_keys
            
            if not matching_keys:
                mapping = self._smart_question_mapping(answer_keys, question_keys)
                if mapping:
                    new_answers = {}
                    for q_key, a_key in mapping.items():
                        new_answers[q_key] = results["parsed_answers"][a_key]
                    results["parsed_answers"] = new_answers
                    matching_keys = set(mapping.keys())
                    results["debug_info"]["applied_mapping"] = mapping
            
            if not matching_keys:
                results["errors"].append("‚ùå Kh√¥ng c√≥ c√¢u n√†o kh·ªõp gi·ªØa ƒë√°p √°n v√† c√¢u h·ªèi.")
                return results
            
            # B∆Ø·ªöC 4: Bi√™n so·∫°n quiz v·ªõi batch processing n√¢ng cao
            print("‚öôÔ∏è B∆Ø·ªöC 4/4: Bi√™n so·∫°n quiz v·ªõi Batch Processing...")
            
            matching_list = sorted(list(matching_keys))
            total_questions = len(matching_list)
            
            # T√≠nh s·ªë batch
            total_batches = (total_questions + self.batch_size - 1) // self.batch_size
            results["agent_info"]["batch_info"]["total_batches"] = total_batches
            
            print(f"üìã S·∫Ω x·ª≠ l√Ω {total_questions} c√¢u h·ªèi trong {total_batches} batch(es)")
            print(f"üìä Batch size: {self.batch_size}, Delay: {self.batch_delay}s")
            
            compiled_count = 0
            error_count = 0
            
            # X·ª≠ l√Ω t·ª´ng batch
            for batch_idx in range(total_batches):
                start_idx = batch_idx * self.batch_size
                end_idx = min(start_idx + self.batch_size, total_questions)
                batch_questions = matching_list[start_idx:end_idx]
                
                print(f"\nüîÑ BATCH {batch_idx + 1}/{total_batches}: C√¢u {start_idx + 1}-{end_idx}")
                
                batch_success, batch_failed = self._process_batch(
                    batch_questions, results, start_idx
                )
                
                compiled_count += batch_success
                error_count += batch_failed
                
                results["agent_info"]["batch_info"]["completed_batches"] = batch_idx + 1
                
                # Delay gi·ªØa c√°c batch (tr·ª´ batch cu·ªëi)
                if batch_idx < total_batches - 1:
                    print(f"‚è≥ ƒê·ª£i {self.batch_delay}s tr∆∞·ªõc batch ti·∫øp theo...")
                    time.sleep(self.batch_delay)
            
            # X·ª≠ l√Ω l·∫°i c√°c c√¢u th·∫•t b·∫°i (n·∫øu c√≥)
            if self.failed_questions:
                print(f"\nüîß X·ª≠ l√Ω l·∫°i {len(self.failed_questions)} c√¢u th·∫•t b·∫°i...")
                recovered = self._retry_failed_questions(results)
                compiled_count += recovered
                error_count = len(self.failed_questions) - recovered
                results["agent_info"]["batch_info"]["recovered_questions"] = recovered
            
            results["agent_info"]["batch_info"]["failed_questions"] = error_count
            
            # T√≠nh to√°n th·ªëng k√™
            processing_time = time.time() - start_time
            results["statistics"] = {
                "total_questions": total_questions,
                "successful_compilations": compiled_count,
                "failed_compilations": error_count,
                "success_rate": f"{(compiled_count/total_questions*100):.1f}%",
                "processing_time": f"{processing_time:.2f}s",
                "questions_per_second": f"{total_questions/processing_time:.2f}",
                "api_requests_used": self.requests_count,
                "avg_request_time": f"{processing_time/max(self.requests_count, 1):.2f}s",
                "batch_processing": {
                    "total_batches": total_batches,
                    "avg_batch_time": f"{processing_time/total_batches:.2f}s",
                    "recovery_attempts": len(self.failed_questions)
                }
            }
            
            results["agent_info"]["quota_requests"] = self.requests_count
            results["success"] = True
            
            print(f"\nüéâ HO√ÄN TH√ÄNH: {compiled_count}/{total_questions} c√¢u th√†nh c√¥ng!")
            print(f"üìä T·ªïng API calls: {self.requests_count}, Th·ªùi gian: {processing_time:.2f}s")
            if error_count > 0:
                print(f"‚ö†Ô∏è {error_count} c√¢u kh√¥ng th·ªÉ x·ª≠ l√Ω (s·∫Ω d√πng fallback)")
            
        except Exception as e:
            results["errors"].append(f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}")
            results["agent_info"]["quota_requests"] = self.requests_count
            print(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")
        
        return results
    
    def _process_batch(self, batch_questions: List[int], results: Dict, start_idx: int) -> Tuple[int, int]:
        """X·ª≠ l√Ω m·ªôt batch c√¢u h·ªèi v·ªõi error recovery."""
        success_count = 0
        failed_count = 0
        
        for i, q_num in enumerate(batch_questions):
            question_text = results["question_blocks"][q_num]
            correct_answer = results["parsed_answers"][q_num]
            current_idx = start_idx + i + 1
            total = len(results["question_blocks"])
            
            print(f"‚öôÔ∏è ƒêang x·ª≠ l√Ω c√¢u {current_idx}/{total} (ID: {q_num})")
            
            try:
                compiled = self.compile_question_with_recovery(q_num, question_text, correct_answer)
                results["compiled_questions"].append(compiled)
                
                if "[L·ªñI X·ª¨ L√ù]" not in compiled.get("cau_hoi", ""):
                    success_count += 1
                    print(f"‚úÖ Th√†nh c√¥ng: C√¢u {q_num}")
                else:
                    failed_count += 1
                    print(f"‚ö†Ô∏è Fallback: C√¢u {q_num}")
                    
            except Exception as e:
                error_str = str(e)
                print(f"‚ùå L·ªói c√¢u {q_num}: {error_str}")
                
                if "QUOTA_EXCEEDED_AFTER_RETRIES" in error_str:
                    # Th√™m v√†o danh s√°ch ƒë·ªÉ retry sau
                    self.failed_questions.append({
                        "q_num": q_num,
                        "question_text": question_text,
                        "correct_answer": correct_answer,
                        "reason": "quota_exceeded"
                    })
                    print(f"üìù ƒê√£ th√™m c√¢u {q_num} v√†o danh s√°ch retry")
                else:
                    # T·∫°o fallback ngay
                    fallback = self._create_fallback_question(q_num, question_text, correct_answer, error=error_str)
                    results["compiled_questions"].append(fallback)
                    print(f"üîß T·∫°o fallback cho c√¢u {q_num}")
                
                failed_count += 1
        
        return success_count, failed_count
    
    def compile_question_with_recovery(self, question_num: int, question_text: str, correct_answer: str) -> Dict[str, Any]:
        """Bi√™n so·∫°n c√¢u h·ªèi v·ªõi recovery mechanism."""
        try:
            return self.compile_question(question_num, question_text, correct_answer)
        except Exception as e:
            if "QUOTA_EXCEEDED_AFTER_RETRIES" in str(e):
                raise e  # Re-raise ƒë·ªÉ batch processor x·ª≠ l√Ω
            else:
                # T·∫°o fallback cho c√°c l·ªói kh√°c
                return self._create_fallback_question(question_num, question_text, correct_answer, error=str(e))
    
    def _retry_failed_questions(self, results: Dict) -> int:
        """Retry c√°c c√¢u h·ªèi th·∫•t b·∫°i sau delay."""
        if not self.failed_questions:
            return 0
        
        print(f"‚è≥ ƒê·ª£i {self.quota_exceeded_delay}s ƒë·ªÉ x·ª≠ l√Ω l·∫°i c√°c c√¢u th·∫•t b·∫°i...")
        time.sleep(self.quota_exceeded_delay)
        
        recovered_count = 0
        remaining_failed = []
        
        for failed_q in self.failed_questions:
            q_num = failed_q["q_num"]
            question_text = failed_q["question_text"]
            correct_answer = failed_q["correct_answer"]
            
            print(f"üîÑ Retry c√¢u {q_num}...")
            
            try:
                compiled = self.compile_question(q_num, question_text, correct_answer)
                results["compiled_questions"].append(compiled)
                
                if "[L·ªñI X·ª¨ L√ù]" not in compiled.get("cau_hoi", ""):
                    recovered_count += 1
                    print(f"‚úÖ Recovered: C√¢u {q_num}")
                else:
                    print(f"‚ö†Ô∏è Fallback: C√¢u {q_num}")
                    
            except Exception as e:
                print(f"‚ùå V·∫´n l·ªói c√¢u {q_num}: {e}")
                # T·∫°o fallback cu·ªëi c√πng
                fallback = self._create_fallback_question(q_num, question_text, correct_answer, error=str(e))
                results["compiled_questions"].append(fallback)
                remaining_failed.append(failed_q)
        
        self.failed_questions = remaining_failed
        return recovered_count

    def _parse_json_response(self, response_text: str) -> Any:
        """Ph√¢n t√≠ch ph·∫£n h·ªìi JSON v·ªõi x·ª≠ l√Ω l·ªói th√¥ng minh."""
        if not response_text:
            return {}
        
        try:
            # L√†m s·∫°ch ph·∫£n h·ªìi
            cleaned = response_text.strip()
            
            # Lo·∫°i b·ªè markdown code blocks
            if cleaned.startswith("```json"):
                cleaned = cleaned[7:]
            if cleaned.startswith("```"):
                cleaned = cleaned[3:]
            if cleaned.endswith("```"):
                cleaned = cleaned[:-3]
            
            cleaned = cleaned.strip()
            
            # Parse JSON
            return json.loads(cleaned)
            
        except json.JSONDecodeError:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ parse JSON, th·ª≠ tr√≠ch xu·∫•t th·ªß c√¥ng...")
            
            # T√¨m JSON object trong text
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                try:
                    return json.loads(json_match.group(0))
                except:
                    pass
            
            print("‚ùå Kh√¥ng th·ªÉ tr√≠ch xu·∫•t JSON t·ª´ ph·∫£n h·ªìi")
            return {}
    
    def _clean_vietnamese_text(self, text: str) -> str:
        """L√†m s·∫°ch vƒÉn b·∫£n ti·∫øng Vi·ªát chuy√™n bi·ªát."""
        # Lo·∫°i b·ªè HTML tags
        cleaned = re.sub(r'<[^>]+>', '', text)
        
        # Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng c·∫ßn thi·∫øt
        cleaned = re.sub(r'\\[^\\]*\\', '', cleaned)
        
        # Chu·∫©n h√≥a kho·∫£ng tr·∫Øng
        cleaned = re.sub(r'\n\s*\n+', '\n\n', cleaned)
        cleaned = re.sub(r'[ \t]+', ' ', cleaned)
        cleaned = re.sub(r' *\n *', '\n', cleaned)
        
        # Lo·∫°i b·ªè k√Ω t·ª± Unicode l·∫°
        cleaned = re.sub(r'[^\w\s\.,\-\(\)\[\]{}:;""''!?√°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒëƒê]', '', cleaned)
        
        return cleaned.strip()
    
    def _extract_vietnamese_question_blocks(self, text: str) -> Dict[int, str]:
        """Tr√≠ch xu·∫•t c√¢u h·ªèi v·ªõi patterns ph√π h·ª£p ti·∫øng Vi·ªát."""
        question_blocks = {}
        
        # C√°c patterns ph·ªï bi·∫øn trong ƒë·ªÅ thi Vi·ªát Nam
        patterns = [
            r'C√¢u\s*(\d+)\s*[\.:]',  # C√¢u 1. ho·∫∑c C√¢u 1:
            r'Question\s*(\d+)\s*[\.:]',  # Question 1.
            r'^(\d+)\s*[\.:]',  # 1. ho·∫∑c 1:
            r'\n(\d+)\s*[\.:]',  # Xu·ªëng d√≤ng r·ªìi s·ªë
            r'B√†i\s*(\d+)\s*[\.:]',  # B√†i 1.
            r'(\d+)\s*\)',  # 1)
        ]
        
        for pattern in patterns:
            parts = re.split(pattern, text, flags=re.IGNORECASE | re.MULTILINE)
            
            if len(parts) > 2:
                temp_blocks = {}
                
                for i in range(1, len(parts), 2):
                    try:
                        q_num = int(parts[i].strip())
                        if i + 1 < len(parts):
                            q_text = parts[i + 1].strip()
                            
                            # Ki·ªÉm tra c√¢u h·ªèi h·ª£p l·ªá (√≠t nh·∫•t 20 k√Ω t·ª±)
                            if len(q_text) > 20:
                                # C·∫Øt b·ªõt n·∫øu qu√° d√†i (tr√°nh l·∫•y nhi·ªÅu c√¢u)
                                if len(q_text) > 1000:
                                    # T√¨m ƒëi·ªÉm c·∫Øt h·ª£p l√Ω (cu·ªëi c√¢u ho·∫∑c cu·ªëi ƒëo·∫°n)
                                    cut_points = [m.start() for m in re.finditer(r'[\.!?]\s*(?:\n|$)', q_text[:1000])]
                                    if cut_points:
                                        q_text = q_text[:cut_points[-1] + 1]
                                    else:
                                        q_text = q_text[:1000] + "..."
                                
                                temp_blocks[q_num] = q_text
                                
                    except ValueError:
                        continue
                
                # Ch·ªçn k·∫øt qu·∫£ t·ªët nh·∫•t
                if temp_blocks and len(temp_blocks) > len(question_blocks):
                    question_blocks = temp_blocks
                    # N·∫øu ƒë√£ t√¨m ƒë∆∞·ª£c ƒë·ªß nhi·ªÅu c√¢u, d·ª´ng l·∫°i
                    if len(question_blocks) >= 10:
                        break
        
        return question_blocks
    
    def _create_fallback_question(self, question_num: int, question_text: str, 
                                correct_answer: str, error: str = None) -> Dict[str, Any]:
        """T·∫°o c√¢u h·ªèi fallback khi x·ª≠ l√Ω th·∫•t b·∫°i."""
        error_msg = f"[L·ªñI X·ª¨ L√ù] {error}" if error else "[L·ªñI X·ª¨ L√ù] Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u h·ªèi"
        
        return {
            "so_cau": question_num,
            "cau_hoi": f"{error_msg}\n\nN·ªôi dung g·ªëc: {question_text[:200]}...",
            "lua_chon": {
                "A": "L·ª±a ch·ªçn A - C·∫ßn x·ª≠ l√Ω th·ªß c√¥ng",
                "B": "L·ª±a ch·ªçn B - C·∫ßn x·ª≠ l√Ω th·ªß c√¥ng", 
                "C": "L·ª±a ch·ªçn C - C·∫ßn x·ª≠ l√Ω th·ªß c√¥ng",
                "D": "L·ª±a ch·ªçn D - C·∫ßn x·ª≠ l√Ω th·ªß c√¥ng"
            },
            "dap_an": correct_answer,
            "do_kho": "can_xu_ly",
            "mon_hoc": "unknown",
            "ghi_chu": f"L·ªói x·ª≠ l√Ω b·ªüi {self.agent_name} - C·∫ßn ki·ªÉm tra th·ªß c√¥ng"
        }
